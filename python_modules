sys

		sys.argv              # 取参数列表
		sys.exit(2)           # 退出脚本返回状态 会被try截取
		sys.exc_info()        # 获取当前正在处理的异常类
		sys.version           # 获取Python解释程序的版本信息
		sys.maxint            # 最大的Int值  9223372036854775807
		sys.maxunicode        # 最大的Unicode值
		sys.modules           # 返回系统导入的模块字段，key是模块名，value是模块
		sys.path              # 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值
		sys.platform          # 返回操作系统平台名称
		sys.stdout            # 标准输出
		sys.stdin             # 标准输入
		sys.stderr            # 错误输出
		sys.exec_prefix       # 返回平台独立的python文件安装的位置
		sys.stdin.readline()  # 从标准输入读一行
		sys.stdout.write("a") # 屏幕输出a 

	os

		# 相对sys模块 os模块更为底层 os._exit() try无法抓取
		os.popen('id').read()      # 执行系统命令得到返回结果
		os.system()                # 得到返回状态 返回无法截取
		os.name                    # 返回系统平台 Linux/Unix用户是'posix'
		os.getenv()                # 读取环境变量
		os.putenv()                # 设置环境变量
		os.getcwd()                # 当前工作路径
		os.chdir()                 # 改变当前工作目录
		os.walk('/root/')          # 递归路径
		
		文件处理
			mkfifo()/mknod()       # 创建命名管道/创建文件系统节点
			remove()/unlink()      # 删除文件
			rename()/renames()     # 重命名文件
			*stat()                # 返回文件信息
			symlink()              # 创建符号链接
			utime()                # 更新时间戳
			tmpfile()              # 创建并打开('w+b')一个新的临时文件
			walk()                 # 遍历目录树下的所有文件名
		
		目录/文件夹
			chdir()/fchdir()       # 改变当前工作目录/通过一个文件描述符改变当前工作目录
			chroot()               # 改变当前进程的根目录
			listdir()              # 列出指定目录的文件
			getcwd()/getcwdu()     # 返回当前工作目录/功能相同,但返回一个unicode对象
			mkdir()/makedirs()     # 创建目录/创建多层目录
			rmdir()/removedirs()   # 删除目录/删除多层目录
		
		访问/权限
			saccess()              # 检验权限模式
			chmod()                # 改变权限模式
			chown()/lchown()       # 改变owner和groupID功能相同,但不会跟踪链接
			umask()                # 设置默认权限模式
			
		文件描述符操作
			open()                 # 底层的操作系统open(对于稳健,使用标准的内建open()函数)
			read()/write()         # 根据文件描述符读取/写入数据 按大小读取文件部分内容
			dup()/dup2()           # 复制文件描述符号/功能相同,但是复制到另一个文件描述符
		
		设备号
			makedev()              # 从major和minor设备号创建一个原始设备号
			major()/minor()        # 从原始设备号获得major/minor设备号
		
		os.path模块

			os.path.expanduser('~/.ssh/key')   # 家目录下文件的全路径

			分隔
				os.path.basename()         # 去掉目录路径,返回文件名
				os.path.dirname()          # 去掉文件名,返回目录路径
				os.path.join()             # 将分离的各部分组合成一个路径名
				os.path.spllt()            # 返回(dirname(),basename())元组
				os.path.splitdrive()       # 返回(drivename,pathname)元组
				os.path.splitext()         # 返回(filename,extension)元组
			
			信息
				os.path.getatime()         # 返回最近访问时间
				os.path.getctime()         # 返回文件创建时间
				os.path.getmtime()         # 返回最近文件修改时间
				os.path.getsize()          # 返回文件大小(字节)
			
			查询
				os.path.exists()          # 指定路径(文件或目录)是否存在
				os.path.isabs()           # 指定路径是否为绝对路径
				os.path.isdir()           # 指定路径是否存在且为一个目录
				os.path.isfile()          # 指定路径是否存在且为一个文件
				os.path.islink()          # 指定路径是否存在且为一个符号链接
				os.path.ismount()         # 指定路径是否存在且为一个挂载点
				os.path.samefile()        # 两个路径名是否指向同一个文件
		
		相关模块
			base64              # 提供二进制字符串和文本字符串间的编码/解码操作
			binascii            # 提供二进制和ASCII编码的二进制字符串间的编码/解码操作
			bz2                 # 访问BZ2格式的压缩文件
			csv                 # 访问csv文件(逗号分隔文件)
			csv.reader(open(file))
			filecmp             # 用于比较目录和文件
			fileinput           # 提供多个文本文件的行迭代器
			getopt/optparse     # 提供了命令行参数的解析/处理
			glob/fnmatch        # 提供unix样式的通配符匹配的功能
			gzip/zlib           # 读写GNU zip(gzip)文件(压缩需要zlib模块)
			shutil              # 提供高级文件访问功能
			c/StringIO          # 对字符串对象提供类文件接口
			tarfile             # 读写TAR归档文件,支持压缩文件
			tempfile            # 创建一个临时文件
			uu                  # uu格式的编码和解码
			zipfile             # 用于读取zip归档文件的工具
			environ['HOME']     # 查看系统环境变量
		
		子进程
			os.fork()    # 创建子进程,并复制父进程所有操作  通过判断pid = os.fork() 的pid值,分别执行父进程与子进程操作，0为子进程
			os.wait()    # 等待子进程结束

		跨平台os模块属性

			linesep         # 用于在文件中分隔行的字符串
			sep             # 用来分隔文件路径名字的字符串
			pathsep         # 用于分割文件路径的字符串
			curdir          # 当前工作目录的字符串名称
			pardir          # 父目录字符串名称

	commands
	
		commands.getstatusoutput('id')       # 返回元组(状态,标准输出)
		commands.getoutput('id')             # 只返回执行的结果, 忽略返回值
		commands.getstatus('file')           # 返回ls -ld file执行的结果
			
	文件和目录管理
	
		import shutil
		shutil.copyfile('data.db', 'archive.db')             # 拷贝文件
		shutil.move('/build/executables', 'installdir')      # 移动文件或目录

	文件通配符

		import glob
		glob.glob('*.py')    # 查找当前目录下py结尾的文件

	随机模块
	
		import random
		random.choice(['apple', 'pear', 'banana'])   # 随机取列表一个参数
		random.sample(xrange(100), 10)  # 不重复抽取10个
		random.random()                 # 随机浮点数
		random.randrange(6)             # 随机整数范围
	
	发送邮件

		发送邮件内容

			#!/usr/bin/python
			#encoding:utf8
			# 导入 smtplib 和 MIMEText 
			import smtplib
			from email.mime.text import MIMEText

			# 定义发送列表 
			mailto_list=["272121935@qq.com","272121935@163.com"]

			# 设置服务器名称、用户名、密码以及邮件后缀 
			mail_host = "smtp.163.com"
			mail_user = "mailuser"
			mail_pass = "password"
			mail_postfix="163.com"

			# 发送邮件函数
			def send_mail(to_list, sub):
				me = mail_user + "<"+mail_user+"@"+mail_postfix+">"
				fp = open('context.txt')
				msg = MIMEText(fp.read(),_charset="utf-8")
				fp.close()
				msg['Subject'] = sub
				msg['From'] = me
				msg['To'] = ";".join(to_list)
				try:
					send_smtp = smtplib.SMTP()
					send_smtp.connect(mail_host)
					send_smtp.login(mail_user, mail_pass)
					send_smtp.sendmail(me, to_list, msg.as_string())
					send_smtp.close()
					return True
				except Exception, e:
					print str(e)
					return False

			if send_mail(mailto_list,"标题"):
				print "测试成功"
			else:
				print "测试失败"

		发送附件

			#!/usr/bin/python
			#encoding:utf8
			import smtplib
			from email.mime.multipart import MIMEMultipart
			from email.mime.base import MIMEBase
			from email import encoders

			def send_mail(to_list, sub, filename):
				me = mail_user + "<"+mail_user+"@"+mail_postfix+">"
				msg = MIMEMultipart()
				msg['Subject'] = sub
				msg['From'] = me
				msg['To'] = ";".join(to_list)
				submsg = MIMEBase('application', 'x-xz')
				submsg.set_payload(open(filename,'rb').read())
				encoders.encode_base64(submsg)
				submsg.add_header('Content-Disposition', 'attachment', filename=filename)
				msg.attach(submsg)
				try:
					send_smtp = smtplib.SMTP()
					send_smtp.connect(mail_host)
					send_smtp.login(mail_user, mail_pass)
					send_smtp.sendmail(me, to_list, msg.as_string())
					send_smtp.close()
					return True
				except Exception, e:
					print str(e)[1]
					return False

			# 设置服务器名称、用户名、密码以及邮件后缀 
			mail_host = "smtp.163.com"
			mail_user = "xuesong"
			mail_pass = "mailpasswd"
			mail_postfix = "163.com"
			mailto_list = ["272121935@qq.com","quanzhou722@163.com"]
			title = 'check'
			filename = 'file_check.html'
			if send_mail(mailto_list,title,filename):
				print "发送成功"
			else:
				print "发送失败"

	解压缩

		gzip压缩

			import gzip
			f_in = open('file.log', 'rb')
			f_out = gzip.open('file.log.gz', 'wb')
			f_out.writelines(f_in)
			f_out.close()
			f_in.close()

		gzip压缩1

			File = 'xuesong_18.log'
			g = gzip.GzipFile(filename="", mode='wb', compresslevel=9, fileobj=open((r'%s.gz' %File),'wb'))
			g.write(open(r'%s' %File).read())
			g.close()

		gzip解压

			g = gzip.GzipFile(mode='rb', fileobj=open((r'xuesong_18.log.gz'),'rb'))
			open((r'xuesong_18.log'),'wb').write(g.read())

		压缩tar.gz

			import os
			import tarfile
			tar = tarfile.open("/tmp/tartest.tar.gz","w:gz")   # 创建压缩包名
			for path,dir,files in os.walk("/tmp/tartest"):     # 递归文件目录
				for file in files:
					fullpath = os.path.join(path,file)
					tar.add(fullpath)                          # 创建压缩包
			tar.close()

		解压tar.gz
			
			import tarfile
			tar = tarfile.open("/tmp/tartest.tar.gz")
			#tar.extract("/tmp")                           # 全部解压到指定路径
			names = tar.getnames()                         # 包内文件名
			for name in names:
				tar.extract(name,path="./")                # 解压指定文件
			tar.close()

		zip压缩
			import zipfile,os
			f = zipfile.ZipFile('filename.zip', 'w' ,zipfile.ZIP_DEFLATED)    # ZIP_STORE 为默认表不压缩. ZIP_DEFLATED 表压缩
			#f.write('file1.txt')                              # 将文件写入压缩包
			for path,dir,files in os.walk("tartest"):          # 递归压缩目录
				for file in files:
					f.write(os.path.join(path,file))           # 将文件逐个写入压缩包         
			f.close()

		zip解压
			if zipfile.is_zipfile('filename.zip'):        # 判断一个文件是不是zip文件
				f = zipfile.ZipFile('filename.zip')
				for file in f.namelist():                 # 返回文件列表
					f.extract(file, r'/tmp/')             # 解压指定文件
				#f.extractall()                           # 解压全部
				f.close()

	时间

		import time
		time.time()                          # 时间戳[浮点]
		time.localtime()[1] - 1              # 上个月
		int(time.time())                     # 时间戳[整s]
		tomorrow.strftime('%Y%m%d_%H%M')     # 格式化时间
		time.strftime('%Y-%m-%d_%X',time.localtime( time.time() ) )              # 时间戳转日期
		time.mktime(time.strptime('2012-03-28 06:53:40', '%Y-%m-%d %H:%M:%S'))   # 日期转时间戳

		判断输入时间格式是否正确
		
			#encoding:utf8
			import time
			while 1:
				atime=raw_input('输入格式如[14.05.13 13:00]:')
				try:
					btime=time.mktime(time.strptime('%s:00' %atime, '%y.%m.%d %H:%M:%S'))
					break
				except:
					print '时间输入错误,请重新输入，格式如[14.05.13 13:00]'

		上一个月最后一天
			import datetime
			lastMonth=datetime.date(datetime.date.today().year,datetime.date.today().month,1)-datetime.timedelta(1)
			lastMonth.strftime("%Y/%m")

		前一天
			(datetime.datetime.now() + datetime.timedelta(days=-1) ).strftime('%Y%m%d')

		两日期相差天数

			import datetime
			d1 = datetime.datetime(2005, 2, 16)
			d2 = datetime.datetime(2004, 12, 31)
			(d1 - d2).days

		向后加10个小时

			import datetime
			d1 = datetime.datetime.now()
			d3 = d1 + datetime.timedelta(hours=10)
			d3.ctime()

	参数[optparse]
		import os, sys
		import time
		import optparse
		# python aaa.py -t file -p /etc/opt -o aaaaa

		def do_fiotest( type, path, output,):
			print type, path, output,

		def main():
			parser = optparse.OptionParser()
			parser.add_option('-t', '--type', dest = 'type', default = None, help = 'test type[file, device]')
			parser.add_option('-p', '--path', dest = 'path', default = None, help = 'test file path or device path')
			parser.add_option('-o', '--output', dest = 'output', default = None, help = 'result dir path')

			(o, a) = parser.parse_args()

			if None == o.type or None == o.path or None == o.output:
				print "No device or file or output dir"
				return -1

			if 'file' != o.type and 'device' != o.type:
				print "You need specify test type ['file' or 'device']"
				return -1

			do_fiotest(o.type, o.path, o.output)
			print "Test done!"
			

		if __name__ == '__main__':
			main()

	hash

		import md5
		m = md5.new('123456').hexdigest()
		
		import hashlib
		m = hashlib.md5()
		m.update("Nobody inspects")    # 使用update方法对字符串md5加密
		m.digest()                     # 加密后二进制结果
		m.hexdigest()                  # 加密后十进制结果
		hashlib.new("md5", "string").hexdigest()               # 对字符串加密
		hashlib.new("md5", open("file").read()).hexdigest()    # 查看文件MD5值

	隐藏输入密码

		import getpass
		passwd=getpass.getpass()

	string打印a-z
		import string
		string.lowercase       # a-z小写
		string.uppercase       # A-Z大小

	paramiko [ssh客户端]

		安装
			sudo apt-get install python-setuptools 
			easy_install
			sudo apt-get install python-all-dev
			sudo apt-get install build-essential

		paramiko实例(账号密码登录执行命令)

			#!/usr/bin/python
			#ssh
			import paramiko
			import sys,os

			host = '10.152.15.200'
			user = 'peterli'
			password = '123456'

			s = paramiko.SSHClient()                                 # 绑定实例
			s.load_system_host_keys()                                # 加载本地HOST主机文件
			s.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # 允许连接不在know_hosts文件中的主机
			s.connect(host,22,user,password,timeout=5)               # 连接远程主机
			while True:
					cmd=raw_input('cmd:')
					stdin,stdout,stderr = s.exec_command(cmd)        # 执行命令
					cmd_result = stdout.read(),stderr.read()         # 读取命令结果
					for line in cmd_result:
							print line,
			s.close()

		paramiko实例(传送文件)

			#!/usr/bin/evn python
			import os
			import paramiko
			host='127.0.0.1'
			port=22
			username = 'peterli'
			password = '123456'
			ssh=paramiko.Transport((host,port))
			privatekeyfile = os.path.expanduser('~/.ssh/id_rsa') 
			mykey = paramiko.RSAKey.from_private_key_file( os.path.expanduser('~/.ssh/id_rsa'))   # 加载key 不使用key可不加
			ssh.connect(username=username,password=password)           # 连接远程主机
			# 使用key把 password=password 换成 pkey=mykey
			sftp=paramiko.SFTPClient.from_transport(ssh)               # SFTP使用Transport通道
			sftp.get('/etc/passwd','pwd1')                             # 下载 两端都要指定文件名
			sftp.put('pwd','/tmp/pwd')                                 # 上传
			sftp.close()
			ssh.close()

		paramiko实例(密钥执行命令)

			#!/usr/bin/python
			#ssh
			import paramiko
			import sys,os
			host = '10.152.15.123'
			user = 'peterli'
			s = paramiko.SSHClient()
			s.load_system_host_keys()
			s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
			privatekeyfile = os.path.expanduser('~/.ssh/id_rsa')             # 定义key路径
			mykey = paramiko.RSAKey.from_private_key_file(privatekeyfile)
			# mykey=paramiko.DSSKey.from_private_key_file(privatekeyfile,password='061128')   # DSSKey方式 password是key的密码
			s.connect(host,22,user,pkey=mykey,timeout=5)
			cmd=raw_input('cmd:')
			stdin,stdout,stderr = s.exec_command(cmd)
			cmd_result = stdout.read(),stderr.read()
			for line in cmd_result:
					print line,
			s.close()

		ssh并发(Pool控制最大并发)

			#!/usr/bin/env python
			#encoding:utf8
			#ssh_concurrent.py

			import multiprocessing
			import sys,os,time
			import paramiko

			def ssh_cmd(host,port,user,passwd,cmd):
				msg = "-----------Result:%s----------" % host

				s = paramiko.SSHClient()
				s.load_system_host_keys()
				s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				try:
					s.connect(host,22,user,passwd,timeout=5) 
					stdin,stdout,stderr = s.exec_command(cmd)

					cmd_result = stdout.read(),stderr.read()
					print msg
					for line in cmd_result:
							print line,

					s.close()
				except paramiko.AuthenticationException:
					print msg
					print 'AuthenticationException Failed'
				except paramiko.BadHostKeyException:
					print msg
					print "Bad host key"	

			result = []
			p = multiprocessing.Pool(processes=20)
			cmd=raw_input('CMD:')
			f=open('serverlist.conf')
			list = f.readlines()
			f.close()
			for IP in list:
				print IP
				host=IP.split()[0]
				port=int(IP.split()[1])
				user=IP.split()[2]
				passwd=IP.split()[3]
				result.append(p.apply_async(ssh_cmd,(host,port,user,passwd,cmd)))

			p.close()

			for res in result:
				res.get(timeout=35)

		ssh并发(取文件状态并发送邮件)

			#!/usr/bin/python
			#encoding:utf8
			#config file: ip.list

			import paramiko
			import multiprocessing
			import smtplib
			import sys,os,time,datetime,socket,re
			from email.mime.text import MIMEText

			# 配置文件(IP列表)
			Conf = 'ip.list'
			user_name = 'peterli'
			user_pwd = 'passwd'
			port = 22
			PATH = '/home/peterli/'

			# 设置服务器名称、用户名、密码以及邮件后缀 
			mail_host = "smtp.163.com"
			mail_user = "xuesong"
			mail_pass = "mailpasswd"
			mail_postfix = "163.com"
			mailto_list = ["272121935@qq.com","quanzhou722@163.com"]
			title = 'file check'

			DATE1=(datetime.datetime.now() + datetime.timedelta(days=-1) ).strftime('%Y%m%d')
			file_path = '%s%s' %(PATH,DATE1)

			def Ssh_Cmd(file_path,host_ip,user_name,user_pwd,port=22):

				s = paramiko.SSHClient()
				s.load_system_host_keys()
				s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				
				try:
					s.connect(hostname=host_ip,port=port,username=user_name,password=user_pwd)
					stdin,stdout,stderr = s.exec_command('stat %s' %file_path)
					stat_result = '%s%s' %(stdout.read(),stderr.read())
					if stat_result.find('No such file or directory') == -1:
						file_status = 'OK\t'
						stdin,stdout,stderr = s.exec_command('du -sh %s' %file_path)
						cmd1_result = '%s_%s' %(stat_result.split()[32],stat_result.split()[33].split('.')[0])
						cmd2_result = ('%s%s' %(stdout.read(),stderr.read())).split()[0] 
					else:
						file_status = '未生成\t'
						cmd1_result = 'null'
						cmd2_result = 'null'
					q.put(['Login successful'])
					s.close()
				except socket.error:
					file_status = '主机或端口错误'
					cmd1_result = '-'
					cmd2_result = '-'
				except paramiko.AuthenticationException:
					file_status = '用户或密码错误'
					cmd1_result = '-'
					cmd2_result = '-'
				except paramiko.BadHostKeyException:
					file_status = 'Bad host key'
					cmd1_result = '-'
					cmd2_result = '-'
				except:
					file_status = 'ssh异常'
					cmd1_result = '-'
					cmd2_result = '-'
				r.put('%s\t-\t%s\t%s\t%s\t%s\n' %(time.strftime('%Y-%m-%d_%H:%M'),host_ip,file_status,cmd2_result,cmd1_result))

			def Concurrent(Conf,file_path,user_name,user_pwd,port):
				# 执行总计
				total = 0
				# 读取配置文件
				f=open(Conf)
				list = f.readlines()
				f.close()
				# 并发执行
				process_list = []
				log_file = file('file_check.log', 'w')
				log_file.write('检查时间\t\t业务\tIP\t\t文件状态\t大小\t生成时间\n') 
				for host_info in list:
					# 判断配置文件中注释行跳过
					if host_info.startswith('#'):
						continue
					# 取变量,其中任意变量未取到就跳过执行
					try:
						host_ip=host_info.split()[0].strip()
						#user_name=host_info.split()[1]
						#user_pwd=host_info.split()[2]
					except:
						log_file.write('Profile error: %s\n' %(host_info))
						continue
					#try:
					#	port=int(host_info.split()[3])
					#except:
					#	port=22
					total +=1
					p = multiprocessing.Process(target=Ssh_Cmd,args=(file_path,host_ip,user_name,user_pwd,port))
					p.start()
					process_list.append(p)
				for j in process_list:
					j.join()
				for j in process_list:
					log_file.write(r.get())

				successful = q.qsize()
				log_file.write('执行完毕。 总执行:%s 登录成功:%s 登录失败:%s\n' %(total,successful,total - successful))
				log_file.flush()
				log_file.close()

			def send_mail(to_list, sub):
				me = mail_user + "<"+mail_user+"@"+mail_postfix+">"
				fp = open('file_check.log')
				msg = MIMEText(fp.read(),_charset="utf-8")
				fp.close()
				msg['Subject'] = sub
				msg['From'] = me
				msg['To'] = ";".join(to_list)
				try:
					send_smtp = smtplib.SMTP()
					send_smtp.connect(mail_host)
					send_smtp.login(mail_user, mail_pass)
					send_smtp.sendmail(me, to_list, msg.as_string())
					send_smtp.close()
					return True
				except Exception, e:
					print str(e)[1]
					return False

			if __name__ == '__main__':
				q = multiprocessing.Queue()
				r = multiprocessing.Queue()
				Concurrent(Conf,file_path,user_name,user_pwd,port)
				if send_mail(mailto_list,title):
					print "发送成功"
				else:
					print "发送失败"

		LazyManage并发批量操作(判断非root交互到root操作)

			#!/usr/bin/python
			#encoding:utf8
			# LzayManage.py
			# config file: serverlist.conf

			import paramiko
			import multiprocessing
			import sys,os,time,socket,re

			def Ssh_Cmd(host_ip,Cmd,user_name,user_pwd,port=22):
				s = paramiko.SSHClient()
				s.load_system_host_keys()
				s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				s.connect(hostname=host_ip,port=port,username=user_name,password=user_pwd)
				stdin,stdout,stderr = s.exec_command(Cmd)
				Result = '%s%s' %(stdout.read(),stderr.read())
				q.put('successful')
				s.close()
				return Result.strip()

			def Ssh_Su_Cmd(host_ip,Cmd,user_name,user_pwd,root_name,root_pwd,port=22):
				s = paramiko.SSHClient()
				s.load_system_host_keys()
				s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
				s.connect(hostname=host_ip,port=port,username=user_name,password=user_pwd)
				ssh = s.invoke_shell()
				time.sleep(0.1)
				ssh.send('su - %s\n' %(root_name))
				buff = ''
				while not buff.endswith('Password: '):
					resp = ssh.recv(9999)
					buff +=resp
				ssh.send('%s\n' %(root_pwd))
				buff = ''
				while True:
					resp = ssh.recv(9999)
					buff +=resp
					if ': incorrect password' in buff:
						su_correct='passwd_error'
						break
					elif buff.endswith('# '):
						su_correct='passwd_correct'
						break
				if su_correct == 'passwd_correct':
					ssh.send('%s\n' %(Cmd))
					buff = ''
					while True:
						resp = ssh.recv(9999)
						if resp.endswith('# '):
							buff +=re.sub('\[.*@.*\]# $','',resp)
							break
						buff +=resp
					Result = buff.lstrip('%s' %(Cmd))
					q.put('successful')
				elif su_correct == 'passwd_error':
					Result = "\033[31mroot密码错误\033[m"
				s.close()
				return Result.strip()

			def Send_File(host_ip,PathList,user_name,user_pwd,Remote='/tmp',port=22):
				s=paramiko.Transport((host_ip,port))
				s.connect(username=user_name,password=user_pwd)
				sftp=paramiko.SFTPClient.from_transport(s) 
				for InputPath in PathList:
					LocalPath = re.sub('^\./','',InputPath.rstrip('/'))
					RemotePath = '%s/%s' %( Remote , os.path.basename( LocalPath ))
					try:
						sftp.rmdir(RemotePath)
					except:
						pass
					try:
						sftp.remove(RemotePath)
					except:
						pass
					if os.path.isdir(LocalPath):
						sftp.mkdir(RemotePath)
						for path,dirs,files in os.walk(LocalPath):
							for dir in dirs:
								dir_path = os.path.join(path,dir)
								sftp.mkdir('%s/%s' %(RemotePath,re.sub('^%s/' %LocalPath,'',dir_path)))
							for file in files:
								file_path = os.path.join(path,file)
								sftp.put( file_path,'%s/%s' %(RemotePath,re.sub('^%s/' %LocalPath,'',file_path)))
					else:
						sftp.put(LocalPath,RemotePath)
				q.put('successful')
				sftp.close()
				s.close()
				Result = '%s  \033[32m传送完成\033[m' % PathList
				return Result

			def Ssh(host_ip,Operation,user_name,user_pwd,root_name,root_pwd,Cmd=None,PathList=None,port=22):
				msg = "\033[32m-----------Result:%s----------\033[m" % host_ip
				try:
					if Operation == 'Ssh_Cmd':
						Result = Ssh_Cmd(host_ip=host_ip,Cmd=Cmd,user_name=user_name,user_pwd=user_pwd,port=port)
					elif Operation == 'Ssh_Su_Cmd':
						Result = Ssh_Su_Cmd(host_ip=host_ip,Cmd=Cmd,user_name=user_name,user_pwd=user_pwd,root_name=root_name,root_pwd=root_pwd,port=port)
					elif Operation == 'Ssh_Script':
						Send_File(host_ip=host_ip,PathList=PathList,user_name=user_name,user_pwd=user_pwd,port=port)
						Script_Head = open(PathList[0]).readline().strip()
						LocalPath = re.sub('^\./','',PathList[0].rstrip('/'))
						Cmd = '%s /tmp/%s' %( re.sub('^#!','',Script_Head), os.path.basename( LocalPath ))
						Result = Ssh_Cmd(host_ip=host_ip,Cmd=Cmd,user_name=user_name,user_pwd=user_pwd,port=port)
					elif Operation == 'Ssh_Su_Script':
						Send_File(host_ip=host_ip,PathList=PathList,user_name=user_name,user_pwd=user_pwd,port=port)
						Script_Head = open(PathList[0]).readline().strip()
						LocalPath = re.sub('^\./','',PathList[0].rstrip('/'))
						Cmd = '%s /tmp/%s' %( re.sub('^#!','',Script_Head), os.path.basename( LocalPath ))
						Result = Ssh_Su_Cmd(host_ip=host_ip,Cmd=Cmd,user_name=user_name,user_pwd=user_pwd,root_name=root_name,root_pwd=root_pwd,port=port)
					elif Operation == 'Send_File':
						Result = Send_File(host_ip=host_ip,PathList=PathList,user_name=user_name,user_pwd=user_pwd,port=port)
					else:
						Result = '操作不存在'
					
				except socket.error:
					Result = '\033[31m主机或端口错误\033[m'
				except paramiko.AuthenticationException:
					Result = '\033[31m用户名或密码错误\033[m'
				except paramiko.BadHostKeyException:
					Result = '\033[31mBad host key\033[m['
				except IOError:
					Result = '\033[31m远程主机已存在非空目录或没有写权限\033[m'
				except:
					Result = '\033[31m未知错误\033[m'
				r.put('%s\n%s\n' %(msg,Result))

			def Concurrent(Conf,Operation,user_name,user_pwd,root_name,root_pwd,Cmd=None,PathList=None,port=22):
				# 读取配置文件
				f=open(Conf)
				list = f.readlines()
				f.close()
				# 执行总计
				total = 0
				# 并发执行
				for host_info in list:
					# 判断配置文件中注释行跳过
					if host_info.startswith('#'):
						continue
					# 取变量,其中任意变量未取到就跳过执行
					try:
						host_ip=host_info.split()[0]
						#user_name=host_info.split()[1]
						#user_pwd=host_info.split()[2]
					except:
						print('Profile error: %s' %(host_info) )
						continue
					try:
						port=int(host_info.split()[3])
					except:
						port=22
					total +=1
					p = multiprocessing.Process(target=Ssh,args=(host_ip,Operation,user_name,user_pwd,root_name,root_pwd,Cmd,PathList,port))
					p.start()
				# 打印执行结果
				for j in range(total):
					print(r.get() )
				if Operation == 'Ssh_Script' or Operation == 'Ssh_Su_Script':
					successful = q.qsize() / 2
				else:
					successful = q.qsize()
				print('\033[32m执行完毕[总执行:%s 成功:%s 失败:%s]\033[m' %(total,successful,total - successful) )
				q.close()
				r.close()

			def Help():
				print('''	1.执行命令
				2.执行脚本      \033[32m[位置1脚本(必须带脚本头),后可带执行脚本所需要的包\文件\文件夹路径,空格分隔]\033[m
				3.发送文件      \033[32m[传送的包\文件\文件夹路径,空格分隔]\033[m
				退出: 0\exit\quit
				帮助: help\h\?
				注意: 发送文件默认为/tmp下,如已存在同名文件会被强制覆盖,非空目录则中断操作.执行脚本先将本地脚本及包发送远程主机上,发送规则同发送文件
				''')

			if __name__=='__main__':
				# 定义root账号信息
				root_name = 'root'
				root_pwd = 'peterli'
				user_name='peterli'
				user_pwd='<++(3Ie'
				# 配置文件
				Conf='serverlist.conf'
				if not os.path.isfile(Conf):
					print('\033[33m配置文件 %s 不存在\033[m' %(Conf) )
					sys.exit()
				Help()
				while True:
					i = raw_input("\033[35m[请选择操作]: \033[m").strip()
					q = multiprocessing.Queue()
					r = multiprocessing.Queue()
					if i == '1':
						if user_name == root_name:
							Operation = 'Ssh_Cmd'
						else:
							Operation = 'Ssh_Su_Cmd'
						Cmd = raw_input('CMD: ').strip()
						if len(Cmd) == 0:
							print('\033[33m命令为空\033[m')
							continue
						Concurrent(Conf=Conf,Operation=Operation,user_name=user_name,user_pwd=user_pwd,root_name=root_name,root_pwd=root_pwd,Cmd=Cmd)
					elif i == '2':
						if user_name == root_name:
							Operation = 'Ssh_Script'
						else:
							Operation = 'Ssh_Su_Script'
						PathList = raw_input('\033[36m本地脚本路径: \033[m').strip().split()
						if len(PathList) == 0:
							print('\033[33m路径为空\033[m')
							continue
						if not os.path.isfile(PathList[0]):
							print('\033[33m本地路径 %s 不存在或不是文件\033[m' %(PathList[0]) )
							continue
						for LocalPath in PathList[1:]:
							if not os.path.exists(LocalPath):
								print('\033[33m本地路径 %s 不存在\033[m' %(LocalPath) )
								break
						else:
							Concurrent(Conf=Conf,Operation=Operation,user_name=user_name,user_pwd=user_pwd,root_name=root_name,root_pwd=root_pwd,PathList=PathList)
					elif i == '3':
						Operation = 'Send_File'
						PathList = raw_input('\033[36m本地路径: \033[m').strip().split()
						if len(PathList) == 0:
							print('\033[33m路径为空\033[m')
							continue
						for LocalPath in PathList:
							if not os.path.exists(LocalPath):
								print('\033[33m本地路径 %s 不存在\033[m' %(LocalPath) )
								break
						else:
							Concurrent(Conf=Conf,Operation=Operation,user_name=user_name,user_pwd=user_pwd,root_name=root_name,root_pwd=root_pwd,PathList=PathList)
					elif i == '0' or i == 'exit' or i == 'quit':
						print("\033[34m退出LazyManage脚本\033[m")
						sys.exit()
					elif i == 'help' or i == 'h' or i == '?':
						Help()

	pysnmp
	
		#!/usr/bin/python
		from pysnmp.entity.rfc3413.oneliner import cmdgen

		cg = cmdgen.CommandGenerator()

		# 注意IP 端口 组默认public  oid值
		varBinds = cg.getCmd( cmdgen.CommunityData('any-agent', 'public',0 ), cmdgen.UdpTransportTarget(('10.10.76.42', 161)),    (1,3,6,1,4,1,2021,10,1,3,1), )

		print varBinds[3][0][1]
