
	小算法

		斐波那契
			#将函数结果作为列表可用于循环
			def fab(max): 
			n, a, b = 0, 0, 1 
			while n < max: 
				yield b         
				a, b = b, a + b 
				n = n + 1 
			for n in fab(5): 
				print n

		乘法口诀

			#!/usr/bin/python
			for i in range(1,10):
				for j in range(1,i+1):
					print j,'*',i,'=',j*i,
				else:
					print ''

		最小公倍数

			# 1-70的最小公倍数
			def c(m,n):
					a1=m
					b1=n
					r=n%m
					while r!=0:
							n=m
							m=r
							r=n%m
					return (a1*b1)/m
			d=1
			for i in range(3,71,2):
					d = c(d,i)
			print d

		排序算法

			插入排序
				def insertion_sort(sort_list):
					iter_len = len(sort_list)
					if iter_len < 2:
						return sort_list
					for i in range(1, iter_len):
						key = sort_list[i]
						j = i - 1
						while j>=0 and sort_list[j]>key:
							sort_list[j+1] = sort_list[j]
							j -= 1
						sort_list[j+1] = key
					return sort_list

			选择排序
				def selection_sort(sort_list):
					iter_len = len(sort_list)
					if iter_len < 2:
						return sort_list
					for i in range(iter_len-1):
						smallest = sort_list[i]
						location = i
						for j in range(i, iter_len):
							if sort_list[j] < smallest:
								smallest = sort_list[j]
								location = j
						if i != location:
							sort_list[i], sort_list[location] = sort_list[location], sort_list[i]
					return sort_list	

			冒泡排序算法
				def bubblesort(numbers):
					for j in range(len(numbers)-1,-1,-1):
						for i in range(j):
							if numbers[i]>numbers[i+1]:
								numbers[i],numbers[i+1] = numbers[i+1],numbers[i]
							print(i,j)
							print(numbers)

		二分算法

			#python 2f.py 123456789 4
			# list('123456789')  =  ['1', '2', '3', '4', '5', '6', '7', '8', '9']
			#!/usr/bin/env python 
			import sys

			def search2(a,m):
				low = 0
				high = len(a) - 1
				while(low <= high):
					mid = (low + high)/2
					midval = a[mid]

					if midval < m:
						low = mid + 1
					elif midval > m:
						high = mid - 1
					else:
						print mid
						return mid
				print -1
				return -1

			if __name__ == "__main__":
				a = [int(i) for i in list(sys.argv[1])]
				m = int(sys.argv[2])
				search2(a,m)
		
	将字典中所有time去掉
	
		a={'version01': {'nba': {'timenba': 'valuesasdfasdf', 'nbanbac': 'vtimefasdf', 'userasdf': 'vtimasdf'}}}
		eval(str(a).replace("time",""))
		
	PIL图像处理

		import Image
		im = Image.open("j.jpg")            # 打开图片
		print im.format, im.size, im.mode   # 打印图像格式、像素宽和高、模式
		# JPEG (440, 330) RGB
		im.show()                           # 显示最新加载图像
		box = (100, 100, 200, 200)
		region = im.crop(box)               # 从图像中提取出某个矩形大小的图像

	图片等比缩小

		# -*- coding: cp936 -*-
		import Image  
		import glob, os  
		  
		#图片批处理  
		def timage():  
			for files in glob.glob('D:\\1\\*.JPG'):  
				filepath,filename = os.path.split(files)  
				filterame,exts = os.path.splitext(filename)  
				#输出路径  
				opfile = r'D:\\22\\'  
				#判断opfile是否存在，不存在则创建  
				if (os.path.isdir(opfile)==False):  
					os.mkdir(opfile)  
				im = Image.open(files)  
				w,h = im.size  
				#im_ss = im.resize((400,400))  
				#im_ss = im.convert('P')  
				im_ss = im.resize((int(w*0.12), int(h*0.12)))  
				im_ss.save(opfile+filterame+'.jpg')  
		  
		if __name__=='__main__':  
			timage()

	取系统返回值赋给序列

		cmd = os.popen("df -Ph|awk 'NR!=1{print $5}'").readlines();
		cmd = os.popen('df -h').read().split('\n')
		cmd = os.popen('lo 2>&1').read()
		
		#取磁盘使用空间
		import commands
		df = commands.getoutput("df -hP")
		[ x.split()[4] for x in df.split("\n") ] 
		[ (x.split()[0],x.split()[4]) for x in df.split("\n") if x.split()[4].endswith("%") ] 

	打印表格

		map = [["a","b","c"],
			   ["d","e","f"],
			   ["g","h","i"]]
		def print_board():
			for i in range(0,3):
				for j in range(0,3):
					print "|",map[i][j],
					#if j != 2:
				print '|'

	生成html文件表格

		log_file = file('check.html', 'w')
		log_file.write("""
		<!DOCTYPE HTML>
		<html lang="utr-8">
		<head>
		<meta charset="UTF-8">
		<title></title>
		</head>
		<body>
		<table align='center' border='0' cellPadding='0'  style='font-size:24px;'><tr ><td>状态统计</td></tr></table>
		<style>.font{font-size:13px}</style>
		<table  align='center' border='1' borderColor=gray cellPadding=3 width=1350  class='font'>
		<tr style='background-color:#666666'>
		  <th width=65>IP</th>
		  <th width=65>状态</th>
		</tr>
		""")
		for i in list:
			log_file.write('<tr><td>%s</td><td>%s</td></tr>\n' %(i.split()[0],i.split()[1]) )
		log_file.write("""
		</table>
		</body>
		</html>
		""")
		log_file.flush()
		log_file.close()

	井字游戏

		#!/usr/bin/python
		# http://www.admin10000.com/document/2506.html
		def print_board():
			for i in range(0,3):
				for j in range(0,3):
					print map[2-i][j],
					if j != 2:
						print "|",
				print ""
		 
		def check_done():
			for i in range(0,3):
				if map[i][0] == map[i][1] == map[i][2] != " " \
				or map[0][i] == map[1][i] == map[2][i] != " ":
					print turn, "won!!!"
					return True
		 
			if map[0][0] == map[1][1] == map[2][2] != " " \
			or map[0][2] == map[1][1] == map[2][0] != " ":
				print turn, "won!!!"
				return True
		 
			if " " not in map[0] and " " not in map[1] and " " not in map[2]:
				print "Draw"
				return True
		 
			return False
		 
		turn = "X"
		map = [[" "," "," "],
			   [" "," "," "],
			   [" "," "," "]]
		done = False
		 
		while done != True:
			print_board()
		 
			print turn, "'s turn"
			print
		 
			moved = False
			while moved != True:
				print "Please select position by typing in a number between 1 and 9, see below for which number that is which position..."
				print "7|8|9"
				print "4|5|6"
				print "1|2|3"
				print
		 
				try:
					pos = input("Select: ")
					if pos <=9 and pos >=1:
						Y = pos/3
						X = pos%3
						if X != 0:
							X -=1
						else:
							 X = 2
							 Y -=1
		 
						if map[Y][X] == " ":
							map[Y][X] = turn
							moved = True
							done = check_done()
		 
							if done == False:
								if turn == "X":
									turn = "O"
								else:
									turn = "X"
		 
				except:
					print "You need to add a numeric value"

	网段划分

		题目
			192.168.1
			192.168.3
			192.168.2
			172.16.3
			192.16.1
			192.16.2
			192.16.3
			10.0.4

			输出结果：
			192.16.1-192.16.3
			192.168.1-192.168.3
			172.16.3
			10.0.4

		答案
			#!/usr/bin/python

			f = file('a.txt')
			c = f.readlines()
			dic={}

			for i in c:
				a=i.strip().split('.')
				if a[0]+'.'+a[1] in dic.keys():
					key=dic["%s.%s" %(a[0],a[1])]
				else:
					key=[]
				key.append(a[2])
				dic[a[0]+'.'+a[1]]=sorted(key)

			for x,y in dic.items():
				if y[0] == y[-1]:
					print '%s.%s' %(x,y[0])
				else:
					print '%s.%s-%s.%s' %(x,y[0],x,y[-1])

	统计日志IP
		# 打印出独立IP，并统计独立IP数
		219.140.190.130 - - [23/May/2006:08:57:59 +0800] "GET /fg172.exe HTTP/1.1" 200 2350253
		221.228.143.52 - - [23/May/2006:08:58:08 +0800] "GET /fg172.exe HTTP/1.1" 206 719996
		221.228.143.52 - - [23/May/2006:08:58:08 +0800] "GET /fg172.exe HTTP/1.1" 206 713242

		#!/usr/bin/python
		dic={}
		a=open("a").readlines()
		for i in a:
			ip=i.strip().split()[0]
			if ip in dic.keys():
				dic[ip] = dic[ip] + 1
			else:
				dic[ip] = 1
		for x,y in dic.items():
			print x," ",y
